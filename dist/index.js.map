{"mappings":";;;;;;;;;;;;mCAAM;;;oCAEA;;;;;gDAIA;;2CACA;6CAAA;;uCACA;yCAAA;AAEN,MAAQ,yCAAmB;AAE1B,CAAA;IACC,MAAM,KAAK,4BAAc,MAAM;QAAE,UAAU;IAAM;IACjD,MAAM,YAAY,4BAAc,sBAAsB;QAAE,UAAU;IAAK;IACvE,MAAM,QAAQ,4BAAc,cAAc;QAAE,UAAU;IAAM;IAE5D,MAAM,QAAQ;QAAC;QAAgB;KAAG,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC;IACxD,MAAM,cAAc;QAAC;QAAgB;KAAG,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC;IAE9D,IAAI;QACF,yBAAW,CAAC,6BAA6B,EAAE,UAAU,CAAC;QACtD,MAAM,UAAU,MAAM,6BAAG,QAAQ,CAAC,WAAW;QAC7C,MAAM,SAAS,KAAK,KAAK,CAAC;QAE1B,yBAAW;QACX,MAAM,OAAO,iCAAO;QAEpB,yBAAW;QACX,MAAM,UAAU,mCAAS;QACzB,IAAI,SACF,OAAO,2BAAa;QAGtB,MAAM,OAAO,qCAAW;YAAC;gBAAE,SAAS;YAAK;SAAE;QAE3C,yBAAW;QACX,MAAM,SAAS,uCAAa;QAE5B,yBAAW;QACX,MAAM,kBAAkB,0CAAgB,MAAM,QAAQ;YAAE,MAAM;YAAM,MAAM;QAAK;QAC/E,MAAM,YAAY,OAAO,MAAM,CAAC;QAEhC,MAAM,SAAS,iBAAU;QACzB,yBAAW;QAEX,yBAAW;QAEX,IAAI,QAAQ,EAAE;QAEd,IAAI;YACF,QAAQ,MAAM,QAAQ,GAAG,CACvB,UAAU,GAAG,CAAC,OAAO,YAAE,QAAQ,UAAE,MAAM,EAAE;gBACvC,MAAM,eAAe,iBAAU,QAAQ;gBACvC,yBAAW,eAAe;gBAE1B,MAAM,6BAAG,SAAS,CAAC,cAAc;gBACjC,OAAO;YACT;QAEJ,EAAE,OAAO,KAAK;YACZ,yBAAW,IAAI,OAAO;QACxB;QAGA,MAAM,gCAAkB,cAAc,CAAC,aAAa,OAAO,QAAQ;YACjE,iBAAiB;QACnB;QAEA,MAAM,OAAO,8BAAI,QAAQ;QAEzB,IAAI,CAAC,MAAM;YACT,2BAAa,CAAC,+CAA+C,CAAC;YAC9D;QACF;QAEA,IAAI,OACF,MAAM,gBACJ,CAAC,6BAA6B,EAAE,wCAAkB,UAAU,EAAE,iCAAW,CAAC,EAC1E;YACE,MAAM;gBACJ,OAAO;gBACP,SAAS;gBACT,aAAa;YACf;YACA,cAAc;YACd,SAAS;gBACP,eAAe,CAAC,OAAO,EAAE,MAAM,CAAC;gBAChC,gBAAgB;YAClB;QACF;aAGF,2BAAa,CAAC,mBAAmB,EAAE,KAAK,CAAC;IAE7C,EAAE,OAAO,OAAO;QACd,OAAO,yBAAW,MAAM,OAAO;IACjC;AACF,CAAA","sources":["index.js"],"sourcesContent":["const fs = require('fs').promises;\nconst path = require('path');\nconst { get } = require('lodash');\nconst got = require('got');\nconst core = require('@actions/core');\nconst artifact = require('@actions/artifact');\nconst { createArtifacts } = require('@bundle-stats/cli-utils');\nconst { createJobs, createReport } = require('@bundle-stats/utils');\nconst { filter, validate } = require('@bundle-stats/utils/lib/webpack');\n\nconst { GITHUB_REPOSITORY, GITHUB_SHA } = process.env;\n\n(async () => {\n  const id = core.getInput('id', { required: false });\n  const statsPath = core.getInput('webpack-stats-path', { required: true });\n  const token = core.getInput('repo-token', { required: false });\n\n  const runId = ['bundle-stats', id].filter(Boolean).join(' / ');\n  const runArtifact = ['bundle-stats', id].filter(Boolean).join('-');\n\n  try {\n    core.debug(`Read webpack stats file from ${statsPath}`);\n    const content = await fs.readFile(statsPath, 'utf8');\n    const source = JSON.parse(content);\n\n    core.debug('Filter webpack stats');\n    const data = filter(source);\n\n    core.debug('Validate webpack stats');\n    const invalid = validate(data);\n    if (invalid) {\n      return core.warning(invalid);\n    }\n\n    const jobs = createJobs([{ webpack: data }]);\n\n    core.debug('Generate report');\n    const report = createReport(jobs);\n\n    core.debug('Generate artifacts');\n    const artifactsByType = createArtifacts(jobs, report, { html: true, json: true });\n    const artifacts = Object.values(artifactsByType);\n\n    const outDir = path.join(__dirname);\n    core.debug(outDir);\n\n    core.debug('Save artifacts');\n\n    let files = [];\n\n    try {\n      files = await Promise.all(\n        artifacts.map(async ({ filename, output }) => {\n          const fullFilename = path.join(outDir, filename);\n          core.debug('Filename: ' + fullFilename);\n\n          await fs.writeFile(fullFilename, output)\n          return fullFilename;\n        })\n      );\n    } catch (err) {\n      core.error(err.message);\n    }\n\n\n    await artifact.create().uploadArtifact(runArtifact, files, outDir, {\n      continueOnError: true\n    });\n\n    const info = get(report, 'insights.webpack.assetsSizeTotal.data.info.displayValue');\n\n    if (!info) {\n      core.warning(`Something went wrong, no information available.`);\n      return;\n    }\n\n    if (token) {\n      await got.post(\n        `https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${GITHUB_SHA}`,\n        {\n          json: {\n            state: 'success',\n            context: runId,\n            description: info\n          },\n          responseType: 'json',\n          headers: {\n            authorization: `Bearer ${token}`,\n            'content-type': 'application/json'\n          }\n        }\n      );\n    } else {\n      core.warning(`Total Bundle Size: ${info}`);\n    }\n  } catch (error) {\n    return core.error(error.message);\n  }\n})();\n"],"names":[],"version":3,"file":"index.js.map"}